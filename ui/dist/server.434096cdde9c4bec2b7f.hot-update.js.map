{"version":3,"sources":["webpack:///./src/graphQLFetch.js"],"names":["dateRegex","RegExp","jsonDateReviver","key","value","test","Date","graphQLFetch","query","variables","showError","apiEndpoint","_isBrowser_","window","process","env","UI_SERVER_API_ENDPOINT","response","fetch","method","headers","body","JSON","stringify","text","result","parse","errors","error","extensions","code","details","exception","join","message","data","e"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA,MAAMA,SAAS,GAAG,IAAIC,MAAJ,CAAW,6BAAX,CAAlB;;AACA,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,KAA9B,EAAqC;AACnC,MAAIJ,SAAS,CAACK,IAAV,CAAeD,KAAf,CAAJ,EAA2B,OAAO,IAAIE,IAAJ,CAASF,KAAT,CAAP;AAC3B,SAAOA,KAAP;AACD;;AAED,eAAeG,YAAf,CAA4BC,KAA5B,EAAmCC,SAAS,GAAG,EAA/C,EAAmDC,SAAS,GAAG,IAA/D,EAAqE;AACnE,QAAMC,WAAW,GAAGC,MAAW,GAC3BC,SAD2B,GAE3BC,OAAO,CAACC,GAAR,CAAYC,sBAFhB;;AAGA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,uDAAK,CAACP,WAAD,EAAc;AACxCQ,YAAM,EAAE,MADgC;AAExCC,aAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,uCAA+B,wBAFxB;AAGP,wCACE,gDAJK;AAKP,qBAAa;AALN,OAF+B;AASxCC,UAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEf,aAAF;AAASC;AAAT,OAAf;AATkC,KAAd,CAA5B;AAWA,UAAMY,IAAI,GAAG,MAAMJ,QAAQ,CAACO,IAAT,EAAnB;AACA,UAAMC,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWL,IAAX,EAAiBnB,eAAjB,CAAf;;AACA,QAAIuB,MAAM,CAACE,MAAX,EAAmB;AACjB,YAAMC,KAAK,GAAGH,MAAM,CAACE,MAAP,CAAc,CAAd,CAAd;;AACA,UAAIC,KAAK,CAACC,UAAN,CAAiBC,IAAjB,KAA0B,gBAA9B,EAAgD;AAC9C,cAAMC,OAAO,GAAGH,KAAK,CAACC,UAAN,CAAiBG,SAAjB,CAA2BL,MAA3B,CAAkCM,IAAlC,CAAuC,IAAvC,CAAhB;AACA,YAAIvB,SAAJ,EAAeA,SAAS,CAAE,GAAEkB,KAAK,CAACM,OAAQ,MAAKH,OAAQ,EAA/B,CAAT;AAChB,OAHD,MAGO,IAAIrB,SAAJ,EAAe;AACpBA,iBAAS,CAAE,GAAEkB,KAAK,CAACC,UAAN,CAAiBC,IAAK,IAAGF,KAAK,CAACM,OAAQ,EAA3C,CAAT;AACD;AACF;;AACD,WAAOT,MAAM,CAACU,IAAd;AACD,GAxBD,CAwBE,OAAOC,CAAP,EAAU;AACV,QAAI1B,SAAJ,EAAeA,SAAS,CAAE,mCAAkC0B,CAAC,CAACF,OAAQ,EAA9C,CAAT;AAChB;AACF;;AACc3B,2EAAf,E","file":"server.434096cdde9c4bec2b7f.hot-update.js","sourcesContent":["import fetch from \"isomorphic-fetch\";\nconst dateRegex = new RegExp(\"^\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d\");\nfunction jsonDateReviver(key, value) {\n  if (dateRegex.test(value)) return new Date(value);\n  return value;\n}\n\nasync function graphQLFetch(query, variables = {}, showError = null) {\n  const apiEndpoint = _isBrowser_\n    ? window.ENV.UI_API_ENDPOINT\n    : process.env.UI_SERVER_API_ENDPOINT;\n  try {\n    const response = await fetch(apiEndpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"http://localhost:8000/\",\n        \"Access-Control-Allow-Headers\":\n          \"Origin, X-Requested-With, Content-Type, Accept\",\n        \"Same-Site\": \"None\",\n      },\n      body: JSON.stringify({ query, variables }),\n    });\n    const body = await response.text();\n    const result = JSON.parse(body, jsonDateReviver);\n    if (result.errors) {\n      const error = result.errors[0];\n      if (error.extensions.code === \"BAD_USER_INPUT\") {\n        const details = error.extensions.exception.errors.join(\"\\n\");\n        if (showError) showError(`${error.message}:\\n${details}`);\n      } else if (showError) {\n        showError(`${error.extensions.code}:${error.message}`);\n      }\n    }\n    return result.data;\n  } catch (e) {\n    if (showError) showError(`Error in sending data to server:${e.message}`);\n  }\n}\nexport default graphQLFetch;\n"],"sourceRoot":""}