{"version":3,"sources":["webpack:///./src/IssueList.jsx"],"names":["IssueList","React","Component","fetchData","match","search","showError","params","URLSearchParams","vars","hasSelection","selectedId","get","status","effortMin","parseInt","Number","isNaN","effortMax","id","x","idInt","query","data","graphQLFetch","constructor","issues","store","initialData","List","selectedIssue","state","toastVisible","toastMessage","toastType","closeIssue","bind","deleteIssue","showSuccess","dismissToast","componentDidMount","loadData","console","log","componentDidUpdate","prevProps","location","prevSearch","prevId","props","setState","issueList","issue","err","error","index","prevState","newList","issueUpdate","pathname","history","issueDelete","push","splice","message","render","style","margin","hasFilter","Status"],"mappings":"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","file":"server.50f7b07f7b3fdca907c6.hot-update.js","sourcesContent":["import React from \"react\";\nimport IssueFilter from \"./IssueFilter.jsx\";\nimport store from './Store.js'\nimport IssueTable from \"./IssueTable.jsx\";\nimport IssueReport from \"./IssueReport.jsx\";\nimport graphQLFetch from \"./graphQLFetch.js\";\nimport IssueDetail from \"./IssueDetail.jsx\";\nimport URLSearchParams from \"url-search-params\";  //the url search parameter are installed in here and are passed to other components\nimport { Panel } from \"react-bootstrap\";\nimport Toast from \"./Toast.jsx\";\nexport default class IssueList extends React.Component {\n\n  static async fetchData(match,search,showError){\n    const params = new URLSearchParams(search);\n    const vars ={hasSelection: false,selectedId:0};\n    if(params.get('status')) vars.status = params.get('status');\n    const effortMin = parseInt(params.get('effortMin'),10);\n    if(!Number.isNaN(effortMin)) vars.effortMin = effortMin;\n    const effortMax = parseInt(params.get('effortMax'),10);\n    if(!Number.isNaN(effortMax)) vars.effortMax = effortMax;\n\n    const {params : { id }} = match;\n    let x = id;\n    const idInt = parseInt(id,10);\n    if(!Number.isNaN(idInt)){\n      vars.hasSelection = true;\n      vars.selectedId = idInt;\n}\n    const query = `query List(\n      $status : StatusType\n      $effortMin: Int\n      $effortMax : Int\n      $hasSelection : Boolean!\n      $selectedId : Int!\n    ){\n      List(\n        status : $status\n        effortMin : $effortMin\n        effortMax : $effortMax\n      )\n      {id title status owner created effort due}                                                                                                 \n      issue(id : $selectedId) @include (if : $hasSelection){\n        id description\n      }\n    }`;\n    const data = await graphQLFetch(query,vars,showError);\n    return data;\n     \n  }\n  constructor() {\n    super();\n    const issues = store.initialData ? store.initialData.List : null;\n    const selectedIssue = store.initialData ? store.initialData.issues : null;\n    delete store.initialData;\n    this.state = {\n      issues,\n      selectedIssue,\n      toastVisible: false,\n      toastMessage: \"\",\n      toastType: \"info\"\n    };\n\n    this.closeIssue = this.closeIssue.bind(this);\n    this.deleteIssue = this.deleteIssue.bind(this);\n    this.showSuccess = this.showSuccess.bind(this);\n    this.showError = this.showError.bind(this);\n    this.dismissToast = this.dismissToast.bind(this);\n  }\n\n  componentDidMount() {\n    const {issues} = this.state;\n    if(issues == null) this.loadData();\n    this.loadData();\n    console.log(\"the componenet is loaded\");\n  }\n\n  componentDidUpdate(prevProps) {\n    const { location: { search: prevSearch },match:{params:{id:prevId}}} = prevProps;\n    const {location: { search },match:{params:{id}}} = this.props;\n    if (prevSearch !== search || prevId !== id) {\n      this.loadData();\n      console.log(`component did update is working fine `);\n    } else console.log(\"Component not updated\");\n  }\n\n  async loadData() {\n    try {\n      const { location: { search}, match }  = this.props;\n      const data = await IssueList.fetchData(match,search, this.showError);\n      if (data) {\n        this.setState({ issues: data.issueList, selectedIssue: data.issue });\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  async closeIssue(index) {\n    const query = `mutation issueClose($id:Int!){\n    issueUpdate(id:$id,changes:{status:Closed}){\n      id title status owner effort created due description\n    }\n  }`;\n    const { issues } = this.state;\n    const data = await graphQLFetch(\n      query,\n      { id: issues[index].id },\n      this.showError\n    );\n    if (data) {\n      this.setState(prevState => {\n        const newList = [...prevState.issues];\n        newList[index] = data.issueUpdate;\n        return { issues: newList };\n      });\n    } else {\n      this.loadData();\n    }\n  }\n\n  async deleteIssue(index) {\n    const query = `mutation issueDelete($id:Int!){\n    issueDelete(id:$id)\n  }`;\n    const { issues } = this.state;\n    const {\n      location: { pathname, search },\n      history\n    } = this.props;\n    const { id } = issues[index];\n    const data = await graphQLFetch(query, { id }, this.showError);\n    if (data && data.issueDelete) {\n      this.setState(prevState => {\n        const newList = [...prevState.issues];\n        if (pathname === `/issues/${id}`) {\n          history.push({ pathname: \"/issues\", search });\n        }\n        newList.splice(index, 1);\n        return { issues: newList };\n      });\n      this.showSuccess(`Deleted issue ${id} successfully`);\n    } else {\n      this.loadData();\n    }\n  }\n\n  showSuccess(message) {\n    this.setState({\n      toastVisible: true,\n      toastMessage: message,\n      toastType: \"success\"\n    });\n  }\n  showError(message) {\n    this.setState({\n      toastVisible: true,\n      toastMessage: message,\n      toastType: \"danger\"\n    });\n  }\n\n  dismissToast() {\n    this.setState({\n      toastVisible: false\n    });\n  }\n\n  render() {\n    const {issues} = this.state;\n    if(issues == null) return null;\n    const { selectedIssue } = this.state;\n    const style = {\n      margin: 30\n    };\n    const { toastVisible, toastType, toastMessage } = this.state;\n    const hasFilter = location.search !== \"\";\n    return (\n      <div id=\"all\">\n        <Panel defaultExpanded={hasFilter}>\n          <Panel.Heading>\n            <Panel.Title toggle>Filter</Panel.Title>\n          </Panel.Heading>\n          <Panel.Body collapsible>\n            <IssueFilter />\n          </Panel.Body>\n        </Panel>\n\n        <hr />\n        <IssueTable\n          issues={this.state.issues}\n          closeIssue={this.closeIssue}\n          stat={this.state.Status}\n          deleteIssue={this.deleteIssue}\n        />\n        <hr />\n       <IssueDetail issue={selectedIssue} />\n        <IssueReport />\n        <Toast\n          showing={toastVisible}\n          onDismiss={this.dismissToast}\n          bsStyle={toastType}\n        >\n          {toastMessage}\n        </Toast>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}