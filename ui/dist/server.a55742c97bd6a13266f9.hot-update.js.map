{"version":3,"sources":["webpack:///./src/IssueList.jsx"],"names":["IssueList","React","Component","fetchData","match","search","showError","params","URLSearchParams","vars","hasSelection","selectedId","get","status","effortMin","parseInt","Number","isNaN","effortMax","id","idInt","query","data","graphQLFetch","constructor","issues","store","initialData","List","selectedIssue","state","loading","closeIssue","bind","deleteIssue","isLoadingScreen","componentDidMount","console","log","componentDidUpdate","prevProps","location","prevSearch","prevId","props","loadData","err","setState","issue","error","document","write","index","showSuccess","prevState","newList","issueUpdate","pathname","history","issueDelete","push","splice","render","style","margin","hasFilter","Status","IssueListWithToast","withToast"],"mappings":"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","file":"server.a55742c97bd6a13266f9.hot-update.js","sourcesContent":["import React from \"react\";\r\nimport IssueFilter from \"./IssueFilter.jsx\";\r\nimport store from \"./Store.js\";\r\nimport IssueTable from \"./IssueTable.jsx\";\r\nimport IssueReport from \"./IssueReport.jsx\";\r\nimport graphQLFetch from \"./graphQLFetch.js\";\r\nimport IssueDetail from \"./IssueDetail.jsx\";\r\nimport URLSearchParams from \"url-search-params\"; //the url search parameter are installed in here and are passed to other components\r\nimport { Panel } from \"react-bootstrap\";\r\nimport withToast from \"./withToast.jsx\";\r\n\r\nclass IssueList extends React.Component {\r\n  static async fetchData(match, search, showError) {\r\n    const params = new URLSearchParams(search);\r\n    const vars = { hasSelection: false, selectedId: 0 };\r\n    if (params.get(\"status\")) vars.status = params.get(\"status\");\r\n    const effortMin = parseInt(params.get(\"effortMin\"), 10);\r\n    if (!Number.isNaN(effortMin)) vars.effortMin = effortMin;\r\n    const effortMax = parseInt(params.get(\"effortMax\"), 10);\r\n    if (!Number.isNaN(effortMax)) vars.effortMax = effortMax;\r\n\r\n    const {\r\n      params: { id },\r\n    } = match;\r\n    const idInt = parseInt(id, 10);\r\n    if (!Number.isNaN(idInt)) {\r\n      vars.hasSelection = true;\r\n      vars.selectedId = idInt;\r\n    }\r\n    const query = `query List(\r\n      $status : StatusType\r\n      $effortMin: Int\r\n      $effortMax : Int\r\n      $hasSelection : Boolean!\r\n      $selectedId : Int!\r\n    ){\r\n      List(\r\n        status : $status\r\n        effortMin : $effortMin\r\n        effortMax : $effortMax\r\n      )\r\n      {id title status owner created effort due}                                                                                                 \r\n      issue(id : $selectedId) @include (if : $hasSelection){\r\n        id description\r\n      }\r\n    }`;\r\n    const data = await graphQLFetch(query, vars, showError);\r\n    return data;\r\n  }\r\n  constructor() {\r\n    super();\r\n    const issues = store.initialData ? store.initialData.List : null;\r\n    const selectedIssue = store.initialData ? store.initialData.issues : null;\r\n    delete store.initialData;\r\n    this.state = {\r\n      issues,\r\n      selectedIssue,\r\n      loading: false,\r\n    };\r\n\r\n    this.closeIssue = this.closeIssue.bind(this);\r\n    this.deleteIssue = this.deleteIssue.bind(this);\r\n    this.isLoadingScreen = this.isLoadingScreen.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { issues } = this.state;\r\n    if (issues == null) {\r\n      this.isLoadingScreen();\r\n      console.log(\"the componenet is loaded\");\r\n    } else {\r\n      console.log(\"no issues\");\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    try {\r\n      const {\r\n        location: { search: prevSearch },\r\n        match: {\r\n          params: { id: prevId },\r\n        },\r\n      } = prevProps;\r\n      const {\r\n        location: { search },\r\n        match: {\r\n          params: { id },\r\n        },\r\n      } = this.props;\r\n      if (prevSearch !== search || prevId !== id) {\r\n        this.loadData();\r\n        console.log(`component did update is working fine `);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  async loadData() {\r\n    try {\r\n      const {\r\n        location: { search },\r\n        match,\r\n        showError,\r\n      } = this.props;\r\n      const data = await IssueList.fetchData(match, search, showError);\r\n      if (data) {\r\n        this.setState({\r\n          loading: false,\r\n          issues: data.List,\r\n          selectedIssue: data.issue,\r\n        });\r\n      }\r\n      if (!data) {\r\n        this.setState({ loading: true });\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n  isLoadingScreen() {\r\n    if (this.state.loading) {\r\n      document.write(\"LOADING PLEASE WAIT\");\r\n    }\r\n  }\r\n\r\n  async closeIssue(index) {\r\n    const { showSuccess, showError } = this.props;\r\n    const query = `mutation issueClose($id:Int!){\r\n    issueUpdate(id:$id,changes:{status:Closed}){\r\n      id title status owner effort created due description\r\n    }\r\n  }`;\r\n    const { issues } = this.state;\r\n    const data = await graphQLFetch(query, { id: issues[index].id }, showError);\r\n    if (data) {\r\n      this.setState((prevState) => {\r\n        const newList = [...prevState.issues];\r\n        newList[index] = data.issueUpdate;\r\n        return { issues: newList };\r\n      });\r\n    } else {\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  async deleteIssue(index) {\r\n    const { showSuccess, showError } = this.props;\r\n    const query = `mutation issueDelete($id:Int!){\r\n    issueDelete(id:$id)\r\n  }`;\r\n    const { issues } = this.state;\r\n    const {\r\n      location: { pathname, search },\r\n      history,\r\n    } = this.props;\r\n    const { id } = issues[index];\r\n    const data = await graphQLFetch(query, { id }, showError);\r\n    if (data && data.issueDelete) {\r\n      this.setState((prevState) => {\r\n        const newList = [...prevState.issues];\r\n        if (pathname === `/issues/${id}`) {\r\n          history.push({ pathname: \"/issues\", search });\r\n        }\r\n        newList.splice(index, 1);\r\n        return { issues: newList };\r\n      });\r\n      showSuccess(`Deleted issue ${id} successfully`);\r\n    } else {\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { issues } = this.state;\r\n    if (issues == null) return null;\r\n    const { selectedIssue } = this.state;\r\n    const style = {\r\n      margin: 30,\r\n    };\r\n\r\n    const hasFilter = location.search !== \"\";\r\n    return (\r\n      <div id=\"all\">\r\n        <Panel defaultExpanded={hasFilter}>\r\n          <Panel.Heading>\r\n            <Panel.Title toggle>Filter</Panel.Title>\r\n          </Panel.Heading>\r\n          <Panel.Body collapsible>\r\n            <IssueFilter urlBase=\"/issues\" />\r\n          </Panel.Body>\r\n        </Panel>\r\n\r\n        <hr />\r\n        <IssueTable\r\n          issues={this.state.issues}\r\n          closeIssue={this.closeIssue}\r\n          stat={this.state.Status}\r\n          deleteIssue={this.deleteIssue}\r\n        />\r\n        <hr />\r\n        <IssueDetail issue={selectedIssue} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst IssueListWithToast = withToast(IssueList);\r\nIssueListWithToast.fetchData = IssueList.fetchData;\r\nexport default IssueListWithToast;\r\n"],"sourceRoot":""}